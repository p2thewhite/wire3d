#include "ProbeRobotController.h"

#include "BulletUtils.h"

using namespace Wire;

//----------------------------------------------------------------------------
ProbeRobotController::ProbeRobotController(Spatial* pProbeRobotSpatial, Spatial* pPlayerSpatial)
{
	WIRE_ASSERT(pProbeRobotSpatial);
	WIRE_ASSERT(pPlayerSpatial);

	mspProbeRobotSpatial = pProbeRobotSpatial;
	mspPlayerSpatial = pPlayerSpatial;
}

//----------------------------------------------------------------------------
Bool ProbeRobotController::Update(Double appTime)
{
	Vector3F playerPosition = mspPlayerSpatial->Local.GetTranslate();
	Float squaredDistance = playerPosition.Dot(-GetPosition());

	if (squaredDistance <= 25.0f) {
		return;
	}

	Vector3F direction = playerPosition - GetPosition();
	mMove = direction * mSpeed * appTime;

	UpdateProbeRobot();
	MovePhysicsEntity();

	mMove = Vector3F::ZERO;

	return true;
}

//----------------------------------------------------------------------------
Vector3F ProbeRobotController::GetPosition()
{
	btVector3 origin = mpGhostObject->getWorldTransform().getOrigin();
	return Vector3F(origin.x(), origin.y(), origin.z());
}

//----------------------------------------------------------------------------
void ProbeRobotController::Register(btDynamicsWorld* pPhysicsWorld)
{
	WIRE_ASSERT(pPhysicsWorld);
	mpPhysicsWorld = pPhysicsWorld;

	mpGhostObject = WIRE_NEW btPairCachingGhostObject();

	btTransform transform;
	transform.setIdentity();
	transform.setOrigin(BulletUtils::Convert(mspProbeRobotSpatial->Local.GetTranslate()));
	mpGhostObject->setWorldTransform(transform);

	btConvexShape* pConvexShape = WIRE_NEW btBoxShape(btVector3(2.0f, 2.0f, 2.0f));
	mpGhostObject->setCollisionShape(pConvexShape);
	mpGhostObject->setCollisionFlags(btCollisionObject::CF_CHARACTER_OBJECT);

	// Create physics entity
	mpPhysicsEntity = WIRE_NEW btKinematicCharacterController(mpGhostObject, pConvexShape, 0.35f);

	// Collide only with static objects (for now)
	mpPhysicsWorld->addCollisionObject(mpGhostObject, btBroadphaseProxy::CharacterFilter, btBroadphaseProxy::StaticFilter | btBroadphaseProxy::CharacterFilter | btBroadphaseProxy::DefaultFilter);
	mpPhysicsWorld->addAction(mpPhysicsEntity);
}

//----------------------------------------------------------------------------
void ProbeRobotController::UpdateProbeRobot()
{

}

//----------------------------------------------------------------------------
Bool ProbeRobotController::MovePhysicsEntity()
{
	mpPhysicsEntity->setWalkDirection(BulletUtils::Convert(mMove));
}
